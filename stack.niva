type Stack 
  size: Int
  top: Int
  stack: MutableList::T

constructor Stack ofSize::Int = [
  list::MutableList::T = {}
  ^ Stack 
    size: ofSize
    top: -1
    stack: list
]


extend Stack [
  on isEmpty = top == -1
  on push: value::T -> Unit = [
    top >= (size - 1) ifTrue: [
      Error throwWithMessage: "Stack is full!" |> orPANIC
    ] 
    top <- top inc
    stack add: value
  ]
  on pop -> T = [
    .isEmpty => Error throwWithMessage: "Stack is empty!" |> orPANIC
    result = stack at: top
    stack removeAt: top
    top <- top dec
    ^ result
  ]
   on peek -> T = [
    .isEmpty => Error throwWithMessage: "Stack is empty!" |> orPANIC
    ^ stack at: top
  ]
  on isFull = top == (size - 1)
  on count = top + 1 
  on toStr -> String = [
    sb = StringBuilder new
    sb append: "Stack{ "
    0..top forEach: [
      sb append: (stack at: it) toString + " "
    ]
    sb append: "}"
    ^ sb toString
  ]
]


