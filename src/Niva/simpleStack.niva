type Stack 
  size: Int
  top: Int
  stack: MutableList::T

constructor Stack ofSize::Int = [
  list::MutableList::T = {}
  ^ Stack 
    size: ofSize
    top: -1
    stack: list
]


extend Stack [
  on isEmpty = top == -1
  on push: value::T -> Unit = [
    top >= (size - 1) ifTrue: [
      Error throwWithMessage: "Stack is full!" |> orPANIC
    ] 
    top <- top inc
    stack add: value
  ]
  on pop -> T = [
    .isEmpty => Error throwWithMessage: "Stack is empty!" |> orPANIC
    result = stack at: top
    stack removeAt: top
    top <- top dec
    ^ result
  ]
   on peek -> T = [
    .isEmpty => Error throwWithMessage: "Stack is empty!" |> orPANIC
    ^ stack at: top
  ]
  on isFull = top == (size - 1)
  on count = top + 1
  on toStr -> String = [
    sb = StringBuilder new
    sb append: "Stack{ "
    0..top forEach: [
      sb append: (stack at: it) toString + " "
    ]
    sb append: "}"
    ^ sb toString
  ]
  on clear = [
    list::MutableList::T = {}
    top <- -1
    stack <- list
  ]
  on push: value::T at: index::Int -> Unit = [
    (index < 0) || (index > top) ifTrue: [ Error throwWithMessage: "Index out of bounds!" |> orPANIC ]
    stack at: index put: value
  ]
  on popAt: index::Int -> T = [
    (index < 0) || (index > top) ifTrue: [
      Error throwWithMessage: "Index out of bounds!" |> orPANIC
    ]
    result = stack at: index
    stack removeAt: index
    top <- top dec
    ^ result
  ]
  on insert: value::T at: index::Int -> Unit = [
    (index < 0) || (index > top) ifTrue: [
      Error throwWithMessage: "Index out of bounds!" |> orPANIC
    ]
    stack at: index insert: value
    top <- top inc
  ]
  on move: index1::Int to: index2::Int -> Unit = [
    (index1 < 0) || (index1 > top) || (index2 < 0) || (index2 > top) ifTrue: [
      Error throwWithMessage: "Index out of bounds!" |> orPANIC
    ]
    temp = this popAt: index1
    // this insert: temp at: index2
  ]
  on swapTopWith: value::T -> T = [
    .isEmpty => Error throwWithMessage: "Stack is empty!" |> orPANIC
    temp = this pop
    .push: value
    ^ temp
  ]
  on toTop: index::Int -> Unit = [
    (index < 0) || (index > top) ifTrue: [
      Error throwWithMessage: "Index out of bounds!" |> orPANIC
    ]
    temp = this popAt: index
    this push: temp
  ] 
  on toBottom: index::Int -> Unit = [
    (index < 0) || (index > top) ifTrue: [
      Error throwWithMessage: "Index out of bounds!" |> orPANIC
    ]
    temp = this popAt: index
    this insert: temp at: 0
  ]
  on reverse = [
    stack <- stack reversed toMutableList
  ]
]


